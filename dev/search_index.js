var documenterSearchIndex = {"docs":
[{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"EditURL = \"https://github.com/JuliaAtoms/AtomicMiscellany.jl/blob/master/docs/src/implementation/hydrogenic.jl\"","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"CurrentModule = AtomicMiscellany","category":"page"},{"location":"implementation/hydrogenic/#notes-hydrogenic","page":"Hydrogenic energies","title":"Notes: hydrogenic energies","text":"","category":"section"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"using AtomicMiscellany: AtomicMiscellany, hydrogenic_energy, UniformShellNucleus, NRElectron, DiracElectron, α #hide\nusing Plots, Formatting #hide","category":"page"},{"location":"implementation/hydrogenic/#Point-nucleus","page":"Hydrogenic energies","title":"Point nucleus","text":"","category":"section"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"The energies for point nuclei (represented with PointNucleus) are calculated using analytic formulae.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"For a non-relativisic particles (NRParticle) the energy is given by","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"E_n = - frac(Zalpha)^22 n^2 mc^2","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"and for relativistic particles (DiracParticle) by","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"m c^2 leftleft1 + left(\nfracZalphan - kappa + sqrtkappa^2 - (Zalpha)^2\nright)^2 right^-12 - 1 right","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"The only thing to note is that for the relativistic case, we set the E = 0 for Z = 0, so that the convention for the energy scale for the relativistic and non-relativistic cases would be the same.","category":"page"},{"location":"implementation/hydrogenic/#Uniform-spherical-shell","page":"Hydrogenic energies","title":"Uniform spherical shell","text":"","category":"section"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"There are no analytical expressions for the energies for finite nuclei. However, in the case of the uniform spherical shell (UniformShellNucleus; aka. cut-off Coulomb, top-slice model), the potential is simple and the equations solvable in the ranges 0 R and R infty) separately.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Following the expressions in Andrae2000, we implement a root-finding based algorithm for determining the energies, in both the relativistic and non-relativistic case.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"# We use this function below to showcase the performance of the implementation of hydrogenic_energies.\nfunction plot_fnc_energies(p; n,\n    Rs = [0.5, 1e-1, 5e-2, 2e-2, 1e-2, 7e-3, 3e-3, 1e-3, 1e-4],\n    qnumbers...\n)\n    Z = range(1, isa(p, AtomicMiscellany.DiracParticle) ? α^-1 : 150, length=1001)\n    emin = hydrogenic_energy.(p, Z; n = n, qnumbers...)\n    emax = hydrogenic_energy.(p, Z; n = n + 1, qnumbers...)\n    p1 = plot(hcat(Z,Z), hcat(emin,emax), c=:black, ls=:dash, legend=:bottomleft, label=false)\n    p2 = plot(hcat(Z,Z), hcat(emin ./ abs.(emin), emax ./ abs.(emin)), label=false, c=:black, ls=:dash)\n    for (i, R) = enumerate(Rs)\n        es = map(Z) do Z\n            try\n                hydrogenic_energy(p, UniformShellNucleus(R), Z; n = n, qnumbers...)\n            catch e\n                return NaN\n            end\n        end\n        plot!(p1, Z, es, label=\"R=$R\", c = i)\n        plot!(p2, Z, es./ abs.(emin), label=false, c = i)\n    end\n    ylabel!(p1, \"E\"); ylabel!(p2, \"E / E(PNC)\")\n    xlabel!(p2, \"Nuclear charge Z\")\n    plot(p1, p2, layout=(2,1), size=(800, 600))\n    vline!([α^-1 α^-1], label=false, c=:black, ls=:dot)\n    title!(\"n = $n, $(qnumbers...)\", subplot=1)\nend\nnothing # hide","category":"page"},{"location":"implementation/hydrogenic/#Non-relativisic-energies","page":"Hydrogenic energies","title":"Non-relativisic energies","text":"","category":"section"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Calculates the matching function f derived from Andrae2000, equations (247-248, 256-258). f is derived by multiplying the equation through with the denominators to remove any infinities these denominators might bring.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"The function AtomicMiscellany.f_andrae_nonrel_topslice implements the following function, which is then fed into a root-finder:","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"beginaligned\nf(E r Z R ell) =\nbeta j_ell(x_rmin) U(a b x_rmout)\n + 2 beta a j_ell(x_rmin) U(a+1 b+1 x_rmout)\n - alpha j_ell+1(x_rmin) U(a b x_rmout)  0\nendaligned\n1em\nalpha_nell = sqrt2(E + ZR) quad\nx_rmin = alpha_nell r quad\nbeta_nell = sqrt-2E quad\nx_rmout = 2 beta_nell r\n1em\na = fracb2 - nu_nell quad\nb = 2(ell + 1) quad\nnu_nell = Zbeta_nell","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"# We can use this function to visualize f:\nfunction plot_nonrel_fnc_f(; R, Z, ℓ)\n    emin = hydrogenic_energy(NRElectron, Z; n = 1)\n    # Excluding the first point, since at E = -Z/R, f is zero, which causes problems\n    es = range(max(1.1emin, -Z/R), 0, length=502)[2:end-1]\n    ys = (E -> AtomicMiscellany.f_andrae_nonrel_topslice(Z=Z, r=R, R=R, ℓ=ℓ, E = E)).(es)\n    any(iszero.(ys)) && @warn \"Zeros in ys\"\n    plot(es, abs.(ys), yaxis=:log10, legend=false, c = (y -> y>0 ? 2 : 1).(ys))\n    absy_sorted = filter(!iszero, sort(abs.(ys)))\n    ylims!(absy_sorted[1]/2, absy_sorted[490])\n    e0s = map(ℓ .+ (1:6)) do n\n        try\n            hydrogenic_energy(NRElectron, UniformShellNucleus(R), Z; n = n, ℓ = ℓ, verbose=false)\n        catch\n            NaN\n        end\n    end\n    xlabel!(\"E\"); ylabel!(\"log |f|\")\n    title!(\"Z=$(fmt(\".2f\", Z)), ℓ=$ℓ, R=$(fmt(\".2e\", R))\")\n    vline!(e0s, c=:gray)\n    vline!([hydrogenic_energy(NRElectron, Z; n = n) for n = 1:3], c=:black, ls=:dash)\n    plot!(size=(800, 400))\nend\nnothing # hide","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Here is f(E) for Z = 1 and ell = 0, for two very different nuclear sizes. R = 10^-4mathrmau is approximately physical, whereas R = 25mathrmau is unphysically huge. However, the latter is useful for showing how the graph of the function shifts as we make the nucleus bigger and bigger.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"The black dashed vertical lines indicate the hydrogenic energies for point nuclei, which can be determined using explicit formulae. As we need to specify a bracketing interval for the root-finder, we use those energies. This seems like a reasonable choice, as we know that the FNC energy will always we higher than the corresponding PNC energy, but unlikely to reach the PNC energy of the 2s, unless the parameters are very extreme.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot(\n    plot_nonrel_fnc_f(R = 1e-4, Z = 1, ℓ = 0),\n    plot_nonrel_fnc_f(R = 2.5, Z = 1, ℓ = 0),\n    layout = (2, 1), size=(800, 600),\n)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"To illustrate the potential problems with the bracketing intervals, let's see what happens (for a huge nucleus) when we increase Z a lot. Eventually, we will hit the 2s energy. However, this should not really happen in any physically relevant cases.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"a = @animate for Z = range(1, 550, length=101)\n    plot_nonrel_fnc_f(R = 1e-2, Z = Z, ℓ = 0)\nend\ngif(a, fps=10)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"To showcase the algorithm an its limits, here are the 1s energies for various nuclear sizes (R values). The black dashed lines once again indicate the bracketing interval of PNC energies.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot_fnc_energies(NRElectron, n = 1, ℓ = 0)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Now, if we do the same thing for n = 2, we start seeing weird cases where","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot_fnc_energies(NRElectron, n = 2, ℓ = 0)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"This can easily be understood by looking at the behaviour of f as you increase Z for a large nucleus (R = 0.1):","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"a = @animate for Z = range(25, 100, length=101)\n    plot_nonrel_fnc_f(R = 0.1, Z = Z, ℓ = 0)\nend\ngif(a, fps=10)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"At one point, the zero corresponding to the 1s energy enters the bracketing interval of the 2s. Root-finder, of course, can not distiguish that, so it just returns the 1s energy. Again though, this is only an issue if the value of R or Z gets extremely large.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"We see the same happening for higher ell values too. One thing to note is that we also get in trouble for the lowest eigenvalue, because the E = -ZR, below which f(E) becomes complex, enters the n=2 bracketing interval.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot_fnc_energies(NRElectron, n = 2, ℓ = 1)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"a = @animate for Z = range(25, 100, length=101)\n    plot_nonrel_fnc_f(R = 0.1, Z = Z, ℓ = 1)\nend\ngif(a, fps=10)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"However, again, for reasonable R and Z values, everything behaves reasonably. Also, correctly, we do not get any zeros at lower n values for higher ell values:","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot(\n    plot_nonrel_fnc_f(R = 1e-4, Z = 1, ℓ = 0),\n    plot_nonrel_fnc_f(R = 1e-4, Z = 1, ℓ = 1),\n    plot_nonrel_fnc_f(R = 1e-4, Z = 1, ℓ = 2),\n    layout = (3, 1), size=(800, 900),\n)","category":"page"},{"location":"implementation/hydrogenic/#Relativistic-energies","page":"Hydrogenic energies","title":"Relativistic energies","text":"","category":"section"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"The relativistic energy is determined in essentially the same way as in the non-relativistic case. The relevant equation in Andrae2000 is (284), setting up the matching condition between the inner and outer parts of the orbital:","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"L^mathrmin_nkappa(R) - fracgammaR = - T^mathrmout_nkappa(R)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"L^mathrmin_nkappa(r) is the logarithmic derivative of the P component of the inner part of the wavefunction (i.e. for r leq R). According to equations (273) and (274), it can be written as","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"L^mathrmin_nkappa(r) = fracell + 1r - T^mathrmin_nkappa(r)\n= fracell + 1r - alpha_nkappa fracj_ell+1(x_mathrmin)j_ell(x_mathrmin)\n1em\nalpha_nkappa = sqrt2 (E + ZR) + (E + ZR)c^2\nquad\nx_mathrmin = alpha_nkappa r","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"T^mathrmout_nkappa(r), which is related to the outer part of the orbital, is given in equation (283)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"T^mathrmout_nkappa(r) = beta_nkappa\n+ 2 beta_nkappa frac\n    a U(a+1 b+1 x_mathrmout) + A cdot (a+1) U(a+2 b+1 x_mathrmout)\n\n    U(a b x_mathrmout) + A cdot U(a + 1 b x_mathrmout)\n\n1em\nx_mathrmout = 2 beta_nkappa r quad\nbeta_nkappa = C^+ C^-  c quad\nC^pm = sqrtc^2 pm W_nkappa\n1em\nW_nkappa = E + c^2 quad\nv_nkappa = frac12 + fracZ W_nkappabeta_nkappa c^2 quad\nA = fracZbeta_nkappa + kappa\n1em\na = b2 - v_nkappa quad\nb = 2gamma + 1 quad\ngamma = sqrtkappa^2 - (Zc)^2","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"We can get rid of the denominators, which may cause some unwanted singularities, and write down the following condition","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"beginaligned\nf(E)  =\nleft(\n    fracell + 1 - gammaR + beta_nkappa\nright) (U_00 + A U_10) J_0 \n - alpha_nkappa (U_00 + A U_10) J_1 \n + 2 beta_nkappa a U_11 + A (a + 1) U_21  0\nendaligned\n1em\nJ_i = j_ell + 1(x_mathrmin) quad\nU_ij = U(a + i b + j x_mathrmout)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"The special functions j_ell(x) and U(a b x) are the spherical bessel and irregular confluent hypergeometric functions, respectively. They are evaluated using the corresponding functions from GSL (sf_bessel_jl, sf_hyperg_U), via GSL.jl.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"# The following function can be used to visualize ``f``.\nfunction plot_rel_fnc_f(; R, Z, κ, energies = nothing, plotfn=plot)\n    es = if isnothing(energies)\n        emin = hydrogenic_energy(DiracElectron, Z; n = 1, κ = κ)\n        # Excluding the first point, since at E = -Z/R, f is zero, which causes problems\n        es = range(max(1.1emin, -Z/R), 0, length=502)[2:end-1]\n    else\n        energies\n    end\n    ys = (E -> AtomicMiscellany.f_andrae_dirac_topslice(Z=Z, R=R, κ=κ, E = E)).(es)\n    any(iszero.(ys)) && @warn \"Zeros in ys\"\n    plotfn(es, abs.(ys), yaxis=:log10, legend=false, c = (y -> y>0 ? 2 : 1).(ys))\n    if isnothing(energies)\n        absy_sorted = filter(!iszero, sort(abs.(ys)))\n        ylims!(absy_sorted[1]/2, absy_sorted[490])\n    end\n    e0s = map(AtomicMiscellany.κ2ℓ(κ) .+ (1:6)) do n\n        try\n            hydrogenic_energy(DiracElectron, UniformShellNucleus(R), Z; n = n, κ = κ, verbose=false)\n        catch e\n            @warn \"Unable to find root for n=$n\" error=(e, catch_backtrace())\n            NaN\n        end\n    end\n    xlabel!(\"E\"); ylabel!(\"log |f|\")\n    title!(\"Z=$(fmt(\".2f\", Z)), κ=$κ, R=$(fmt(\".2e\", R))\")\n    vline!(e0s, c=:gray)\n    vline!([hydrogenic_energy(DiracElectron, Z; n = n, κ = κ) for n = 1:6], c=:black, ls=:dash)\n    plot!(size=(800, 400))\nend\nnothing # hide","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"The general behavior of f is very similar to the non-relativistic case. However, the expressions given in Andrae2000 require us to evaluate gamma = sqrtkappa^2 - (Zc)^2, so the expressions would become complex for Z  α^-1. For that reason we restrict ourselves to Z leq α^-1.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot(\n    plot_rel_fnc_f(R = 1e-4, Z = 1, κ = -1),\n    plot_rel_fnc_f(R = 5e-1, Z = 1, κ = -1),\n    layout = (2, 1), size=(800, 600),\n)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot_fnc_energies(DiracElectron, n = 1, κ = -1)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"As in the non-relativistic case, we run into issues with the lower energy zeros coming into the bracketing interval once the parameters become extreme enough (as we're limited in Z, this primarily means R in this case).","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot_fnc_energies(DiracElectron, n = 2, κ = -1)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot_fnc_energies(DiracElectron, n = 3, κ = -1)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot_fnc_energies(DiracElectron, n = 2, κ = 1)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"We do run into trouble if we try to find the zeros for higher angular momenta:","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot_fnc_energies(DiracElectron, n = 2, κ = -2)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot_fnc_energies(DiracElectron, n = 3, κ = 2)","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"This, turns out, is due to the limited resolution of 64-bit floats. We can zoom in on around the 1s zero. We see that f(E) evaluates to the same value for many E values, implying a rounding problem. This, in turn, leads to the root-finder not being happy, since the bracketing interval does not encompass any positive f(E) values.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"let R = 1e-3, Z = 1, κ = -2,\n    e0 = hydrogenic_energy(DiracElectron, Z; n = 2, κ = κ),\n    (emin, emax) = e0 .+ (-1, 1) .* 0.000_000_000_05\n    plot_rel_fnc_f(R=R, Z=Z, κ=κ, energies = range(emin, emax, length=151), plotfn=scatter)\n    xlims!(emin, emax)\nend","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"There are workarounds (modify the mathematical expressions for better numerical stability, use BigFloats), but for now this is simply a limitation of the current implementation.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Also, the non-relativistic version should also run into this issue at high enough ell.","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"","category":"page"},{"location":"implementation/hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"This page was generated using Literate.jl.","category":"page"},{"location":"implementation/nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"CurrentModule = AtomicMiscellany","category":"page"},{"location":"implementation/nuclearmodels/#notes-nuclei","page":"Nuclear models","title":"Notes: nuclear models","text":"","category":"section"},{"location":"implementation/nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"Notes on the internal implementation details of the nuclear models. Anything discussed here is not considered to be part of the public API.","category":"page"},{"location":"implementation/nuclearmodels/#Density-vs.-potential","page":"Nuclear models","title":"Density vs. potential","text":"","category":"section"},{"location":"implementation/nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"The nuclear charge density and the corresponding potential are related to each other via the Poisson equation. In radial coordinates, for a spherically symmetric density, the potential at r, as per equation (22) in Andrae2000, is given by the following integral","category":"page"},{"location":"implementation/nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"V(r) = - frac4pirleft\n    int_0^r s^2 rho(s) ds\n    + r int_r^infty s rho(s) ds\nright","category":"page"},{"location":"implementation/nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"In the tests, we use this to numerically verify that the implementations for density and potential actually match, as they are generally implemented independently based on analytical expressions.","category":"page"},{"location":"implementation/nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"The numerical integration can be done using the following routine","category":"page"},{"location":"implementation/nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"using QuadGK\nfunction potential_quadk(ρ, r; rmax = Inf, rscale = 1.0)\n    # Based on equation (22) in Andrae. The potential is split into two separate integrals\n    # on the intervals [0, r] and [r, ∞).\n    #\n    # However, often the density can have its non-trivial parts at very small r values,\n    # which means that the adaptive quadgk algorithm might not realize that it even has\n    # non-zero parts. To work around that, we do 2 things:\n    #\n    # 1. We scale the r-axis with rscale (so r = rscale*t), and actually integrate in t.\n    #    In practice, we'll use the RMS value for the scaling, since we'd expect that to\n    #    correspond to the scale at which the density has a non-trivial shape.\n    # 2. If r is much greater than rscale, we split the [0, r] integration into two\n    #    sub-intervals, hoping that we capture all the non-trivial part in the first\n    #    interval.\n    #\n    # The change of variable r = rscale*t leads to\n    #\n    #   ∫ f(r) dr = rscale ∫ f(rscale*t) dt\n    #\n    # So we have to also multiply the resulting integral with rscale.\n    _I1(t) = rscale^3 * t^2 * ρ(rscale*t)\n    I1, δ1 = min(r, rmax)/rscale > 10.0 ? quadgk(_I1, 0, 10.0, min(r, rmax)/rscale) :\n        quadgk(_I1, 0, min(r, rmax)/rscale)\n    I2, δ2 = (r < rmax) ? quadgk(t -> rscale^2 * t * ρ(rscale*t), r/rscale, rmax/rscale) : (0.0, 0.0)\n    # add up the subintegral based on equation (22):\n    -4π*(I1/r + I2)\nend\nnothing # hide","category":"page"},{"location":"implementation/nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"As an example, let's plot a few arbitrary cases","category":"page"},{"location":"implementation/nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"using AtomicMiscellany.NuclearModels\nusing Plots: plot, plot!\nrs = range(0, 1, length=101)\nplot(legend=:bottomright)\nlet nm = UniformSphericalNucleus(0.6)\n    plot!(\n        rs, potential_quadk.(r -> density(nm, r), rs, rmax = 0.6, rscale = rms(nm)),\n        label = \"Uniform sphere\", c = 1, lw = 3,\n    )\n    plot!(rs, (r -> potential(nm, r)).(rs), c=:black, ls=:dash, label=nothing)\nend\nlet nm = GaussianNucleus(0.25)\n    plot!(\n        rs, potential_quadk.(r -> density(nm, r), rs, rscale = rms(nm)),\n        label = \"Gaussian\", c = 2, lw = 3,\n    )\n    plot!(rs, (r -> potential(nm, r)).(rs), c=:black, ls=:dash, label=\"Analytic\")\nend","category":"page"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"CurrentModule = AtomicMiscellany","category":"page"},{"location":"nuclearmodels/#Nuclear-models","page":"Nuclear models","title":"Nuclear models","text":"","category":"section"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"Each nuclear model is implemented as a subtype of AbstractNuclearModel. An instance of each nuclear model is assumed to be normalized to Z = 1.","category":"page"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"AbstractNuclearModel","category":"page"},{"location":"nuclearmodels/#AtomicMiscellany.AbstractNuclearModel","page":"Nuclear models","title":"AtomicMiscellany.AbstractNuclearModel","text":"abstract type AbstractNuclearModel\n\nSupertype for all (radially symmetric) nuclear models. The underlying charge distribution of the nuclear model is assumed to be normalized to unity (i.e. corresponding to Z = 1).\n\nEach concrete nuclear model of type T <: AbstractNuclearModel should implement the following method\n\npotential(::T, r::Real) -> Float64: return the value of the potential at the radius r.\n\nAdditional, each nuclear model may also implement\n\ndensity(::T, r::Real) -> Float64: return the value of the (normalized) charge density at the radius r.\nrms(::T): return the root-mean-square radius sqrtlangle r^2 rangle of the underlying charge distribution.\nfrom_rms(::Type{T}, rms): construct an instance of the nuclear model with the specified root-mean-square radius.\n\nnote: Units\nAll quantities are assumed to be in atomic units.\n\n\n\n\n\n","category":"type"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"The package implements various nuclear models, illustrated by the following plot. The root-mean-square radius of the charge density is the same for each mode to keep the potentials comparable.","category":"page"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"using AtomicMiscellany.NuclearModels, Plots\nrs = 10 .^ range(-6, -2, length=501)\nplot(\n    title = \"Nuclear potentials with RMS = 10⁻⁴ a.u.\",\n    xlabel = \"r (a.u.)\", ylabel = \"Nuclear potential V\",\n    xaxis=:log10, ylims = (-2.1e4, 0.1e4), legend=:bottomright,\n)\nV(M) = r -> potential(M, r)\nplot!(rs, V(PointNucleus()).(rs), label = \"PointNucleus\")\nplot!(rs, V(from_rms(UniformShellNucleus, 1e-4)).(rs), label = \"UniformShellNucleus\")\nplot!(rs, V(from_rms(UniformSphericalNucleus, 1e-4)).(rs), label = \"UniformSphericalNucleus\")\nplot!(rs, V(from_rms(GaussianNucleus, 1e-4)).(rs), label = \"GaussianNucleus\")\n#plot!(rs, V(from_rms(FermiNucleus, 1e-4)).(rs), label = \"FermiNucleus\") # hide\nplot!() # hide","category":"page"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"PointNucleus\nUniformShellNucleus\nUniformSphericalNucleus\nGaussianNucleus","category":"page"},{"location":"nuclearmodels/#AtomicMiscellany.PointNucleus","page":"Nuclear models","title":"AtomicMiscellany.PointNucleus","text":"struct PointNucleus <: AbstractNuclearModel\n\nRepresent a point nucleus with the potential\n\nV(r) = - Z  r\nquad\nrho(r) = fracZ4pi r^2 delta(r)\n\nThis nuclear model has no parameters. Also, this model does not define a method for density due to the delta-function nature of the charge distribution.\n\nConstructors\n\nPointNucleus(): construct an instance of PointNucleus\n\nExamples\n\njulia> using AtomicMiscellany: PointNucleus, rms, potential\n\njulia> rms(PointNucleus())\n0.0\n\njulia> potential(PointNucleus(), 2)\n-0.5\n\n\n\n\n\n","category":"type"},{"location":"nuclearmodels/#AtomicMiscellany.UniformShellNucleus","page":"Nuclear models","title":"AtomicMiscellany.UniformShellNucleus","text":"struct UniformShellNucleus <: AbstractNuclearModel\n\nRepresents a nuclear model where all the charge is unformly distributed over an infinitely thin shell at radius R. The nuclear potential and charge distribution are given by\n\nV(r) = begincases\n    -ZR  0 leq r leq R \n    -Zr  r  R\nendcases\nquad\nrho(r) = fracZ4pi r^2 delta(r - R)\n\nNote that this model does not define a method for density due to the delta-function nature of the charge distribution.\n\nConstructors\n\nUniformShellNucleus(R::Real): construct a shell nucleus with radius R.\nfrom_rms(UniformShellNucleus, rms): constructs a shell nucleus with the radius determined from the root-mean-square radius sqrtlangle r^2 rangle of the charge distribution\nR = sqrtlangle r^2 rangle\n\n\n\n\n\n","category":"type"},{"location":"nuclearmodels/#AtomicMiscellany.UniformSphericalNucleus","page":"Nuclear models","title":"AtomicMiscellany.UniformSphericalNucleus","text":"struct UniformSphericalNucleus <: AbstractNuclearModel\n\nRepresents a nuclear charge distribution where the charge is homogeneously distributed in a sphere of radius R. The potential and charge distributions are given by\n\nV(r) = begincases\n    -fracZ2Rleft3 - left(fracrRright)^2right  0 leq r leq R \n    -fracZr  r  R\nendcases\nquad\nrho(r) = begincases\n    frac3Z4pi R^3  0 leq r leq R \n    0  r  R\nendcases\n\n\nConstructors\n\nUniformSphericalNucleus(R::Real): construct a homogeneous spherical nucleus with radius R.\nfrom_rms(UniformSphericalNucleus, rms): constructs a homogeneous spherical nucleus with the radius determined from the root-mean-square radius sqrtlangle r^2 rangle of the charge distribution\nR = sqrtfrac53 sqrtlangle r^2 rangle\n\n\n\n\n\n","category":"type"},{"location":"nuclearmodels/#AtomicMiscellany.GaussianNucleus","page":"Nuclear models","title":"AtomicMiscellany.GaussianNucleus","text":"struct GaussianNucleus <: AbstractNuclearModel\n\nRepresents a Gaussian-shaped nuclear charge distribution, size of which is determined by the parameter R`. The potential and charge distributions are given by\n\nV(r) = - fracZr mathrmerfleft(fracrRright)\nquad\nrho(r) = fracZpi^32 R^3expleft-left(fracrRright)^2right\n\n\nConstructors\n\nGaussianNucleus(R::Real): constructs a Gaussian nuclear model of size R.\nfrom_rms(UniformSphericalNucleus, rms): constructs a Gaussian nucleus with the R parameter determined from the root-mean-square radius sqrtlangle r^2 rangle of the charge distribution\nR = sqrtfrac23 sqrtlangle r^2 rangle\n\n\n\n\n\n","category":"type"},{"location":"nuclearmodels/#Root-mean-square-radius","page":"Nuclear models","title":"Root-mean-square radius","text":"","category":"section"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"The following methods are for determining the RMS radius of nuclei, loosely based on experimental data.","category":"page"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"rms(::Type{JohnsonSoff1985}, ::Real)","category":"page"},{"location":"nuclearmodels/#AtomicMiscellany.rms-Tuple{Type{AtomicMiscellany.JohnsonSoff1985}, Real}","page":"Nuclear models","title":"AtomicMiscellany.rms","text":"rms(JohnsonSoff1985, A::Real) -> Float64\n\nReturns the root-mean-square radius (in atomic units) of a nucleus based on the fit from the JohnsonSoff1985 paper\n\nrmrms(A) = (0836 A^13 + 0570)rmfm\n\nwhere A is the atomic mass number of the isotope.\n\njulia> using AtomicMiscellany: rms, JohnsonSoff1985\n\njulia> rms(JohnsonSoff1985, 238)\n0.00010867476884785438\n\nnote: Accuracy and validity\nThe paper states that the fit is for A  9, and it appears that the largest A value in the data used for the fit was about 250. The implementation, however, will work with any positive A value.The accuracy is stated to be 005rmfm i.e. 95 times 10^-7rmau.\n\n\n\n\n\n","category":"method"},{"location":"nuclearmodels/#Utilities","page":"Nuclear models","title":"Utilities","text":"","category":"section"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"potential\ndensity\nrms\nfrom_rms\nAtomicMiscellany.NuclearModels","category":"page"},{"location":"nuclearmodels/#AtomicMiscellany.potential","page":"Nuclear models","title":"AtomicMiscellany.potential","text":"potential(::AbstractNuclearModel, r::Real) -> Float64\n\nReturn the value of the (normalized) charge density at the radius r.\n\n\n\n\n\n","category":"function"},{"location":"nuclearmodels/#AtomicMiscellany.density","page":"Nuclear models","title":"AtomicMiscellany.density","text":"density(::AbstractNuclearModel, r::Real) -> Float64\n\nReturn the value of the (normalized) charge density at the radius r.\n\n\n\n\n\n","category":"function"},{"location":"nuclearmodels/#AtomicMiscellany.rms","page":"Nuclear models","title":"AtomicMiscellany.rms","text":"rms(::AbstractNuclearModel)\n\nReturn the root-mean-square radius sqrtlangle r^2 rangle of the underlying charge distribution.\n\n\n\n\n\n","category":"function"},{"location":"nuclearmodels/#AtomicMiscellany.from_rms","page":"Nuclear models","title":"AtomicMiscellany.from_rms","text":"from_rms(::Type{<:AbstractNuclearModel}, rms)\n\nConstruct an instance of the nuclear model with the specified root-mean-square radius.\n\n\n\n\n\n","category":"function"},{"location":"nuclearmodels/#AtomicMiscellany.NuclearModels","page":"Nuclear models","title":"AtomicMiscellany.NuclearModels","text":"Can be used to bring various bindings related to nuclear models into the namespace.\n\njulia> using AtomicMiscellany.NuclearModels\n\njulia> parentmodule(rms), parentmodule(AbstractNuclearModel)\n(AtomicMiscellany, AtomicMiscellany)\n\n\n\n\n\n","category":"module"},{"location":"nuclearmodels/#References","page":"Nuclear models","title":"References","text":"","category":"section"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"Andrae2000\nJohnsonSoff1985","category":"page"},{"location":"nuclearmodels/#AtomicMiscellany.Andrae2000","page":"Nuclear models","title":"AtomicMiscellany.Andrae2000","text":"struct Andrae2000\n\nType to dispatch on data from the following paper:\n\nAndrae, D. \"Finite Nuclear Charge Density Distributions in Electronic Structure Calculations for Atoms and Molecules.\" Physics Reports 336, no. 6 (October 2000): 413–525. https://doi.org/10.1016/S0370-1573(00)00007-7.\n\n\n\n\n\n","category":"type"},{"location":"nuclearmodels/#AtomicMiscellany.JohnsonSoff1985","page":"Nuclear models","title":"AtomicMiscellany.JohnsonSoff1985","text":"struct JohnsonSoff1985\n\nType to dispatch on data from the following paper:\n\nW.R. Johnson, Gerhard Soff, \"The lamb shift in hydrogen-like atoms, 1 ⩽ Z ⩽ 110\", Atomic Data and Nuclear Data Tables, Volume 33, Issue 3, 1985, Pages 405-446, https://doi.org/10.1016/0092-640X(85)90010-5\n\nSee also: rms(::Type{JohnsonSoff1985}, ::Real).\n\n\n\n\n\n","category":"type"},{"location":"nuclearmodels/#Index","page":"Nuclear models","title":"Index","text":"","category":"section"},{"location":"nuclearmodels/","page":"Nuclear models","title":"Nuclear models","text":"Pages = [\"nuclearmodels.md\"]","category":"page"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"CurrentModule = AtomicMiscellany","category":"page"},{"location":"hydrogenic/#Hydrogenic-energies","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"","category":"section"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Hydrogenic bound state energies can be calculated using the hydrogenic_energy functions. Depending on the arguments, the function dispatches on different implementations, calculating the energy for different physical cases.","category":"page"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"hydrogenic_energy","category":"page"},{"location":"hydrogenic/#AtomicMiscellany.hydrogenic_energy","page":"Hydrogenic energies","title":"AtomicMiscellany.hydrogenic_energy","text":"hydrogenic_energy(\n    dynamics::AbstractParticle[, nucleus::AbstractNuclearModel], Z;\n    qnumbers...\n) -> Float64\n\nReturns the energy (in atomic units) of a hydrogenic bound state for given dynamics (particle), central potential generated by a nuclear charge distribution, and quantum numbers.\n\nEach nuclear model is, by the definition of AbstractNuclearModel, normalized to unity. This means that the nuclear charge Z needs to be passed as a separate argument. Also, the second argument (nucleus) can be omitted and it defaults to PointNucleus.\n\nQuantum numbers\n\nThe keyword arguments (qnumbers...) can be used to specify all the necessarily quantum numbers to uniquely identify the state. In some cases, some quantum numbers may be omitted.\n\nIn the non-relativistic case we need to specify n and ℓ, whereas in the relativistic case it is n and κ.\n\n\n\n\n\n","category":"function"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"See the related implementation notes for more information and details.","category":"page"},{"location":"hydrogenic/#Examples","page":"Hydrogenic energies","title":"Examples","text":"","category":"section"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"using Plots\nusing AtomicMiscellany: hydrogenic_energy, NRElectron, DiracElectron, UniformShellNucleus, α","category":"page"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"As a simple usage example, let's plot the PNC energies for a few n values, comparing the relativistic and non-relativistic energies.","category":"page"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot(\n    legend=:bottomleft, size = (800, 400),\n    xlabel = \"Nuclear charge Z\", ylabel = \"Energy (mc²)\",\n    title = \"n=1-3 PNC energies\",\n)\nZ = range(1, α^-1, length=501)\nplot!(Z, hydrogenic_energy.(NRElectron, Z; n = 1) .* α^2, label=\"NR\", c=1)\nplot!(Z, hydrogenic_energy.(NRElectron, Z; n = 2) .* α^2, label=false, c=1)\nplot!(Z, hydrogenic_energy.(NRElectron, Z; n = 3) .* α^2, label=false, c=1)\nplot!(Z, hydrogenic_energy.(DiracElectron, Z; n = 1, κ = -1) .* α^2, label=\"Dirac\", c=2)\nplot!(Z, hydrogenic_energy.(DiracElectron, Z; n = 2, κ = -1) .* α^2, label=false, c=2)\nplot!(Z, hydrogenic_energy.(DiracElectron, Z; n = 3, κ = -1) .* α^2, label=false, c=2)","category":"page"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Similarly, we can look at the FNC correction to the point nucleus energies","category":"page"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"plot(\n    legend=:bottomright, yaxis = :log10, size = (800, 400),\n    xlabel = \"Nuclear charge Z\", ylabel = \"FNC energy correction (mc²)\",\n    title = \"n=1-4 FNC corrections (relativistic)\",\n)\nZ = range(1, α^-1, length=501)\nnm = UniformShellNucleus(1e-4) # RMS: 1e-4 a.u., for all Z\nδE(p, Z; kwargs...) = hydrogenic_energy(p, nm, Z; kwargs...) .- hydrogenic_energy(p, Z; kwargs...)\nplot!(Z, δE.(DiracElectron, Z; n = 1, κ = -1) .* α^2, label=\"n=1\")\nplot!(Z, δE.(DiracElectron, Z; n = 2, κ = -1) .* α^2, label=\"n=2\")\nplot!(Z, δE.(DiracElectron, Z; n = 3, κ = -1) .* α^2, label=\"n=3\")\nplot!(Z, δE.(DiracElectron, Z; n = 4, κ = -1) .* α^2, label=\"n=4\")","category":"page"},{"location":"hydrogenic/#Particles","page":"Hydrogenic energies","title":"Particles","text":"","category":"section"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Different free-particle dynamics (e.g. non-relativistic or relativistic) lead to different energies. We use subtypes of AbstractParticle to dispatch on the different types.","category":"page"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"AbstractParticle","category":"page"},{"location":"hydrogenic/#AtomicMiscellany.AbstractParticle","page":"Hydrogenic energies","title":"AtomicMiscellany.AbstractParticle","text":"abstract type AbstractParticle\n\nSubtypes of AbstractParticle represent various particles and/or Hamiltonians, such as particles described the Dirac equation or the non-relativistic Schrödinger equation.\n\nThe subtypes are used to determine which physical particle species is meant when dispatching on generic functions calculating some properties of or related to the particle.\n\n\n\n\n\n","category":"type"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Currently, we support spin-1/2 particles described by either the non-relativistic Schrödinger equation or the relativistic Dirac equation.","category":"page"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"NRParticle\nDiracParticle","category":"page"},{"location":"hydrogenic/#AtomicMiscellany.NRParticle","page":"Hydrogenic energies","title":"AtomicMiscellany.NRParticle","text":"struct NRParticle <: AbstractParticle\n\nRepresents a non-relativistic particle, described by the non-relativistic Schrödinger equation.\n\ni fracpartialPsipartial t = - fracnabla^22 m^2 Psi\n\n\n\n\n\n","category":"type"},{"location":"hydrogenic/#AtomicMiscellany.DiracParticle","page":"Hydrogenic energies","title":"AtomicMiscellany.DiracParticle","text":"struct DiracParticle <: AbstractParticle\n\nRepresents a relativistic particle, the free-particle dynamics of which are described by the Dirac equation.\n\n(gamma^mu partial_mu - m) Psi = 0\n\nNote that we set the zero of the energy to +mc^2.\n\n\n\n\n\n","category":"type"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"For convenience, we also instantiate cases with specific masses.","category":"page"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"NRElectron\nDiracElectron\nNRMuon\nDiracMuon","category":"page"},{"location":"hydrogenic/#AtomicMiscellany.NRElectron","page":"Hydrogenic energies","title":"AtomicMiscellany.NRElectron","text":"const NRElectron\n\nA non-relativistic particle (NRParticle) with the mass of an electron.\n\n\n\n\n\n","category":"constant"},{"location":"hydrogenic/#AtomicMiscellany.DiracElectron","page":"Hydrogenic energies","title":"AtomicMiscellany.DiracElectron","text":"const DiracElectron :: DiracParticle\n\nA relativistic Dirac fermion (DiracParticle) with the mass of an electron.\n\n\n\n\n\n","category":"constant"},{"location":"hydrogenic/#AtomicMiscellany.NRMuon","page":"Hydrogenic energies","title":"AtomicMiscellany.NRMuon","text":"const NRMuon\n\nA non-relativistic particle (NRParticle) with the mass of a muon.\n\n\n\n\n\n","category":"constant"},{"location":"hydrogenic/#AtomicMiscellany.DiracMuon","page":"Hydrogenic energies","title":"AtomicMiscellany.DiracMuon","text":"const DiracMuon :: DiracParticle\n\nA relativistic Dirac fermion (DiracParticle) with the mass of a muon.\n\n\n\n\n\n","category":"constant"},{"location":"hydrogenic/#Index","page":"Hydrogenic energies","title":"Index","text":"","category":"section"},{"location":"hydrogenic/","page":"Hydrogenic energies","title":"Hydrogenic energies","text":"Pages = [\"hydrogenic.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AtomicMiscellany","category":"page"},{"location":"#AtomicMiscellany","page":"Home","title":"AtomicMiscellany","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AtomicMiscellany","category":"page"},{"location":"#AtomicMiscellany.AtomicMiscellany","page":"Home","title":"AtomicMiscellany.AtomicMiscellany","text":"A gallimaufry of disparate utilities useful in atomic physics that are too small and/or simple to deserve a package of their own.\n\nBy default, AtomicMiscellany does not export anything (i.e. doing using AtomicMiscellany does not introduce any new names into the namespace). This is because the package contains a lot of unrelated bindings and would is most cases pollute the namespace. Instead, you can either being the necessary binding into the namespace explicitly or fully qualify them at the use-site with the package name.\n\nThe package also provides submodules to bring related subsets bindings into namespace:\n\nAtomicMiscellany.NuclearModels\n\n\n\n\n\n","category":"module"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
